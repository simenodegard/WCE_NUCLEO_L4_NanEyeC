
WCE_NUCLEO_L4_NanEyeC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005590  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  080057d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080057d8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be6  00000000  00000000  0002db04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00030330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029044  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a1a  00000000  00000000  00059ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd1be  00000000  00000000  000638e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003224  00000000  00000000  00160b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005734 	.word	0x08005734

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005734 	.word	0x08005734

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	f5ad 4d50 	sub.w	sp, sp, #53248	; 0xd000
 8000502:	b0b4      	sub	sp, #208	; 0xd0
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t empty_data[966] = {0};
 8000506:	f507 434d 	add.w	r3, r7, #52480	; 0xcd00
 800050a:	f103 0308 	add.w	r3, r3, #8
 800050e:	4618      	mov	r0, r3
 8000510:	f240 33c6 	movw	r3, #966	; 0x3c6
 8000514:	461a      	mov	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f005 f904 	bl	8005724 <memset>
	uint8_t received_data[52480] = {0};
 800051c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000520:	3bc8      	subs	r3, #200	; 0xc8
 8000522:	4618      	mov	r0, r3
 8000524:	f44f 434d 	mov.w	r3, #52480	; 0xcd00
 8000528:	461a      	mov	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f005 f8fa 	bl	8005724 <memset>
	uint8_t test_pattern[6];
	test_pattern[0] = 0b10010000;
 8000530:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000534:	3bd0      	subs	r3, #208	; 0xd0
 8000536:	2290      	movs	r2, #144	; 0x90
 8000538:	701a      	strb	r2, [r3, #0]
	test_pattern[1] = 0b11000001;
 800053a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800053e:	3bd0      	subs	r3, #208	; 0xd0
 8000540:	22c1      	movs	r2, #193	; 0xc1
 8000542:	705a      	strb	r2, [r3, #1]
	test_pattern[2] = 0b00101010;
 8000544:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000548:	3bd0      	subs	r3, #208	; 0xd0
 800054a:	222a      	movs	r2, #42	; 0x2a
 800054c:	709a      	strb	r2, [r3, #2]
	test_pattern[3] = 0b10010010;
 800054e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000552:	3bd0      	subs	r3, #208	; 0xd0
 8000554:	2292      	movs	r2, #146	; 0x92
 8000556:	70da      	strb	r2, [r3, #3]
	test_pattern[4] = 0b00000101;
 8000558:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800055c:	3bd0      	subs	r3, #208	; 0xd0
 800055e:	2205      	movs	r2, #5
 8000560:	711a      	strb	r2, [r3, #4]
	test_pattern[5] = 0b00101000;
 8000562:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000566:	3bd0      	subs	r3, #208	; 0xd0
 8000568:	2228      	movs	r2, #40	; 0x28
 800056a:	715a      	strb	r2, [r3, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fe99 	bl	80012a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 fa08 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fb8e 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 fb5a 	bl	8000c30 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800057c:	f000 fa80 	bl	8000a80 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000580:	f000 facc 	bl	8000b1c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000584:	f000 fb16 	bl	8000bb4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim2);

  //---- ACTIVATION CLOCK PULSE -----
  HAL_SPI_DeInit(&hspi1);
 8000588:	4829      	ldr	r0, [pc, #164]	; (8000630 <main+0x134>)
 800058a:	f003 fb50 	bl	8003c2e <HAL_SPI_DeInit>
  Toggle_GPIO_pin_Init();
 800058e:	f000 fc4d 	bl	8000e2c <Toggle_GPIO_pin_Init>
  GPIOA -> ODR ^= GPIO_PIN_5;
 8000592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059c:	f083 0320 	eor.w	r3, r3, #32
 80005a0:	6153      	str	r3, [r2, #20]
  HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fef2 	bl	800138c <HAL_Delay>
  GPIOA -> ODR ^= GPIO_PIN_5;
 80005a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b2:	f083 0320 	eor.w	r3, r3, #32
 80005b6:	6153      	str	r3, [r2, #20]

  //---- REGISTER CONFIGURATION - 48-bit (4PP) -----
  MX_SPI1_Init();
 80005b8:	f000 fafc 	bl	8000bb4 <MX_SPI1_Init>
  HAL_SPI_Transmit(&hspi1, test_pattern, 4, 1000);
 80005bc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80005c0:	39d0      	subs	r1, #208	; 0xd0
 80005c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c6:	2204      	movs	r2, #4
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <main+0x134>)
 80005ca:	f003 fb58 	bl	8003c7e <HAL_SPI_Transmit>

  //---- WAIT FOR IDLE START-UP ----
  HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fedc 	bl	800138c <HAL_Delay>

  //---- 10 CLOCKS -----
  HAL_SPI_DeInit(&hspi1);
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0x134>)
 80005d6:	f003 fb2a 	bl	8003c2e <HAL_SPI_DeInit>
  Toggle_GPIO_pin_Init();
 80005da:	f000 fc27 	bl	8000e2c <Toggle_GPIO_pin_Init>
  for (uint8_t i = 0; i < 20; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	f507 4250 	add.w	r2, r7, #53248	; 0xd000
 80005e4:	f102 02cf 	add.w	r2, r2, #207	; 0xcf
 80005e8:	7013      	strb	r3, [r2, #0]
 80005ea:	e012      	b.n	8000612 <main+0x116>
    {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f001 fd79 	bl	80020e8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fec8 	bl	800138c <HAL_Delay>
  for (uint8_t i = 0; i < 20; i++)
 80005fc:	f507 4350 	add.w	r3, r7, #53248	; 0xd000
 8000600:	f103 03cf 	add.w	r3, r3, #207	; 0xcf
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	f507 4250 	add.w	r2, r7, #53248	; 0xd000
 800060c:	f102 02cf 	add.w	r2, r2, #207	; 0xcf
 8000610:	7013      	strb	r3, [r2, #0]
 8000612:	f507 4350 	add.w	r3, r7, #53248	; 0xd000
 8000616:	f103 03cf 	add.w	r3, r3, #207	; 0xcf
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b13      	cmp	r3, #19
 800061e:	d9e5      	bls.n	80005ec <main+0xf0>
    }

//  //---- 12 CLOCKS -----
  for (uint8_t i = 0; i < 24; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	f507 4250 	add.w	r2, r7, #53248	; 0xd000
 8000626:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 800062a:	7013      	strb	r3, [r2, #0]
 800062c:	e015      	b.n	800065a <main+0x15e>
 800062e:	bf00      	nop
 8000630:	20000140 	.word	0x20000140
    {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000634:	2120      	movs	r1, #32
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 fd55 	bl	80020e8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 fea4 	bl	800138c <HAL_Delay>
  for (uint8_t i = 0; i < 24; i++)
 8000644:	f507 4350 	add.w	r3, r7, #53248	; 0xd000
 8000648:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	f507 4250 	add.w	r2, r7, #53248	; 0xd000
 8000654:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 8000658:	7013      	strb	r3, [r2, #0]
 800065a:	f507 4350 	add.w	r3, r7, #53248	; 0xd000
 800065e:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b17      	cmp	r3, #23
 8000666:	d9e5      	bls.n	8000634 <main+0x138>
    }


  MX_DMA_Init();
 8000668:	f000 fae2 	bl	8000c30 <MX_DMA_Init>
  MX_SPI1_Init();
 800066c:	f000 faa2 	bl	8000bb4 <MX_SPI1_Init>

  	//---- INITIAL PRE-SYNC MODE: RECEIVE 492 PP FROM CAMERA -----
    HAL_SPI_Receive(&hspi1, received_data, 492, 100);
 8000670:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000674:	39c8      	subs	r1, #200	; 0xc8
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 800067c:	48c0      	ldr	r0, [pc, #768]	; (8000980 <main+0x484>)
 800067e:	f003 fc6c 	bl	8003f5a <HAL_SPI_Receive>

    //---- SYNC MODE -----
    HAL_SPI_Receive(&hspi1, received_data, 984, 100);
 8000682:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000686:	39c8      	subs	r1, #200	; 0xc8
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800068e:	48bc      	ldr	r0, [pc, #752]	; (8000980 <main+0x484>)
 8000690:	f003 fc63 	bl	8003f5a <HAL_SPI_Receive>

    //---- DELAY MODE -----
    HAL_SPI_Receive(&hspi1, received_data, 984, 100);
 8000694:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000698:	39c8      	subs	r1, #200	; 0xc8
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80006a0:	48b7      	ldr	r0, [pc, #732]	; (8000980 <main+0x484>)
 80006a2:	f003 fc5a 	bl	8003f5a <HAL_SPI_Receive>

	//---- READOUT MODE -----
	HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //1
 80006a6:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006aa:	39c8      	subs	r1, #200	; 0xc8
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 80006b4:	48b2      	ldr	r0, [pc, #712]	; (8000980 <main+0x484>)
 80006b6:	f003 fc50 	bl	8003f5a <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //2
 80006ba:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006be:	39c8      	subs	r1, #200	; 0xc8
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 80006c8:	48ad      	ldr	r0, [pc, #692]	; (8000980 <main+0x484>)
 80006ca:	f003 fc46 	bl	8003f5a <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //3
 80006ce:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006d2:	39c8      	subs	r1, #200	; 0xc8
 80006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d8:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 80006dc:	48a8      	ldr	r0, [pc, #672]	; (8000980 <main+0x484>)
 80006de:	f003 fc3c 	bl	8003f5a <HAL_SPI_Receive>

	//---- END OF FRAME -----
	HAL_SPI_Receive(&hspi1, received_data, 12, 100);
 80006e2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006e6:	39c8      	subs	r1, #200	; 0xc8
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	220c      	movs	r2, #12
 80006ec:	48a4      	ldr	r0, [pc, #656]	; (8000980 <main+0x484>)
 80006ee:	f003 fc34 	bl	8003f5a <HAL_SPI_Receive>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //---- REGISTER CONFIGURATION - 48-bit (4PP) -----
	  HAL_SPI_Transmit(&hspi1, test_pattern, 6, 1000);
 80006f2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006f6:	39d0      	subs	r1, #208	; 0xd0
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	2206      	movs	r2, #6
 80006fe:	48a0      	ldr	r0, [pc, #640]	; (8000980 <main+0x484>)
 8000700:	f003 fabd 	bl	8003c7e <HAL_SPI_Transmit>

	  //---- INTERFACE MODE -----
	  HAL_SPI_Transmit(&hspi1, empty_data, 966, 1000);
 8000704:	f507 414d 	add.w	r1, r7, #52480	; 0xcd00
 8000708:	f101 0108 	add.w	r1, r1, #8
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	f240 32c6 	movw	r2, #966	; 0x3c6
 8000714:	489a      	ldr	r0, [pc, #616]	; (8000980 <main+0x484>)
 8000716:	f003 fab2 	bl	8003c7e <HAL_SPI_Transmit>

	  //---- SYNC and DELAY MODE -----
	  HAL_SPI_Receive(&hspi1, received_data, 1968, 1000);
 800071a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800071e:	39c8      	subs	r1, #200	; 0xc8
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	f44f 62f6 	mov.w	r2, #1968	; 0x7b0
 8000728:	4895      	ldr	r0, [pc, #596]	; (8000980 <main+0x484>)
 800072a:	f003 fc16 	bl	8003f5a <HAL_SPI_Receive>
	  //---- READOUT MODE -----
//	  HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //1
//	  HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //2
//	  HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //3

	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 1
 800072e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000732:	39c8      	subs	r1, #200	; 0xc8
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	f241 3238 	movw	r2, #4920	; 0x1338
 800073a:	4891      	ldr	r0, [pc, #580]	; (8000980 <main+0x484>)
 800073c:	f003 fc0d 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 2
 8000740:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000744:	39c8      	subs	r1, #200	; 0xc8
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	f241 3238 	movw	r2, #4920	; 0x1338
 800074c:	488c      	ldr	r0, [pc, #560]	; (8000980 <main+0x484>)
 800074e:	f003 fc04 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 3
 8000752:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000756:	39c8      	subs	r1, #200	; 0xc8
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	f241 3238 	movw	r2, #4920	; 0x1338
 800075e:	4888      	ldr	r0, [pc, #544]	; (8000980 <main+0x484>)
 8000760:	f003 fbfb 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 4
 8000764:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000768:	39c8      	subs	r1, #200	; 0xc8
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	f241 3238 	movw	r2, #4920	; 0x1338
 8000770:	4883      	ldr	r0, [pc, #524]	; (8000980 <main+0x484>)
 8000772:	f003 fbf2 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 5
 8000776:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800077a:	39c8      	subs	r1, #200	; 0xc8
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	f241 3238 	movw	r2, #4920	; 0x1338
 8000782:	487f      	ldr	r0, [pc, #508]	; (8000980 <main+0x484>)
 8000784:	f003 fbe9 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 6
 8000788:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800078c:	39c8      	subs	r1, #200	; 0xc8
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	f241 3238 	movw	r2, #4920	; 0x1338
 8000794:	487a      	ldr	r0, [pc, #488]	; (8000980 <main+0x484>)
 8000796:	f003 fbe0 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 7
 800079a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800079e:	39c8      	subs	r1, #200	; 0xc8
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	f241 3238 	movw	r2, #4920	; 0x1338
 80007a6:	4876      	ldr	r0, [pc, #472]	; (8000980 <main+0x484>)
 80007a8:	f003 fbd7 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 8
 80007ac:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007b0:	39c8      	subs	r1, #200	; 0xc8
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	f241 3238 	movw	r2, #4920	; 0x1338
 80007b8:	4871      	ldr	r0, [pc, #452]	; (8000980 <main+0x484>)
 80007ba:	f003 fbce 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 9
 80007be:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007c2:	39c8      	subs	r1, #200	; 0xc8
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	f241 3238 	movw	r2, #4920	; 0x1338
 80007ca:	486d      	ldr	r0, [pc, #436]	; (8000980 <main+0x484>)
 80007cc:	f003 fbc5 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 10
 80007d0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007d4:	39c8      	subs	r1, #200	; 0xc8
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	f241 3238 	movw	r2, #4920	; 0x1338
 80007dc:	4868      	ldr	r0, [pc, #416]	; (8000980 <main+0x484>)
 80007de:	f003 fbbc 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 11
 80007e2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007e6:	39c8      	subs	r1, #200	; 0xc8
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	f241 3238 	movw	r2, #4920	; 0x1338
 80007ee:	4864      	ldr	r0, [pc, #400]	; (8000980 <main+0x484>)
 80007f0:	f003 fbb3 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 12
 80007f4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80007f8:	39c8      	subs	r1, #200	; 0xc8
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	f241 3238 	movw	r2, #4920	; 0x1338
 8000800:	485f      	ldr	r0, [pc, #380]	; (8000980 <main+0x484>)
 8000802:	f003 fbaa 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 13
 8000806:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800080a:	39c8      	subs	r1, #200	; 0xc8
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	f241 3238 	movw	r2, #4920	; 0x1338
 8000812:	485b      	ldr	r0, [pc, #364]	; (8000980 <main+0x484>)
 8000814:	f003 fba1 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 14
 8000818:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800081c:	39c8      	subs	r1, #200	; 0xc8
 800081e:	2364      	movs	r3, #100	; 0x64
 8000820:	f241 3238 	movw	r2, #4920	; 0x1338
 8000824:	4856      	ldr	r0, [pc, #344]	; (8000980 <main+0x484>)
 8000826:	f003 fb98 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 15
 800082a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800082e:	39c8      	subs	r1, #200	; 0xc8
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	f241 3238 	movw	r2, #4920	; 0x1338
 8000836:	4852      	ldr	r0, [pc, #328]	; (8000980 <main+0x484>)
 8000838:	f003 fb8f 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 16
 800083c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000840:	39c8      	subs	r1, #200	; 0xc8
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	f241 3238 	movw	r2, #4920	; 0x1338
 8000848:	484d      	ldr	r0, [pc, #308]	; (8000980 <main+0x484>)
 800084a:	f003 fb86 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 17
 800084e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000852:	39c8      	subs	r1, #200	; 0xc8
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	f241 3238 	movw	r2, #4920	; 0x1338
 800085a:	4849      	ldr	r0, [pc, #292]	; (8000980 <main+0x484>)
 800085c:	f003 fb7d 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 18
 8000860:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000864:	39c8      	subs	r1, #200	; 0xc8
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	f241 3238 	movw	r2, #4920	; 0x1338
 800086c:	4844      	ldr	r0, [pc, #272]	; (8000980 <main+0x484>)
 800086e:	f003 fb74 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 19
 8000872:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000876:	39c8      	subs	r1, #200	; 0xc8
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	f241 3238 	movw	r2, #4920	; 0x1338
 800087e:	4840      	ldr	r0, [pc, #256]	; (8000980 <main+0x484>)
 8000880:	f003 fb6b 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 20
 8000884:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000888:	39c8      	subs	r1, #200	; 0xc8
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	f241 3238 	movw	r2, #4920	; 0x1338
 8000890:	483b      	ldr	r0, [pc, #236]	; (8000980 <main+0x484>)
 8000892:	f003 fb62 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 21
 8000896:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800089a:	39c8      	subs	r1, #200	; 0xc8
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	f241 3238 	movw	r2, #4920	; 0x1338
 80008a2:	4837      	ldr	r0, [pc, #220]	; (8000980 <main+0x484>)
 80008a4:	f003 fb59 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 22
 80008a8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80008ac:	39c8      	subs	r1, #200	; 0xc8
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	f241 3238 	movw	r2, #4920	; 0x1338
 80008b4:	4832      	ldr	r0, [pc, #200]	; (8000980 <main+0x484>)
 80008b6:	f003 fb50 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 23
 80008ba:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80008be:	39c8      	subs	r1, #200	; 0xc8
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	f241 3238 	movw	r2, #4920	; 0x1338
 80008c6:	482e      	ldr	r0, [pc, #184]	; (8000980 <main+0x484>)
 80008c8:	f003 fb47 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 24
 80008cc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80008d0:	39c8      	subs	r1, #200	; 0xc8
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	f241 3238 	movw	r2, #4920	; 0x1338
 80008d8:	4829      	ldr	r0, [pc, #164]	; (8000980 <main+0x484>)
 80008da:	f003 fb3e 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 25
 80008de:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80008e2:	39c8      	subs	r1, #200	; 0xc8
 80008e4:	2364      	movs	r3, #100	; 0x64
 80008e6:	f241 3238 	movw	r2, #4920	; 0x1338
 80008ea:	4825      	ldr	r0, [pc, #148]	; (8000980 <main+0x484>)
 80008ec:	f003 fb35 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 26
 80008f0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80008f4:	39c8      	subs	r1, #200	; 0xc8
 80008f6:	2364      	movs	r3, #100	; 0x64
 80008f8:	f241 3238 	movw	r2, #4920	; 0x1338
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <main+0x484>)
 80008fe:	f003 fb2c 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 27
 8000902:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000906:	39c8      	subs	r1, #200	; 0xc8
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	f241 3238 	movw	r2, #4920	; 0x1338
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <main+0x484>)
 8000910:	f003 fb23 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 28
 8000914:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000918:	39c8      	subs	r1, #200	; 0xc8
 800091a:	2364      	movs	r3, #100	; 0x64
 800091c:	f241 3238 	movw	r2, #4920	; 0x1338
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <main+0x484>)
 8000922:	f003 fb1a 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 29
 8000926:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800092a:	39c8      	subs	r1, #200	; 0xc8
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	f241 3238 	movw	r2, #4920	; 0x1338
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <main+0x484>)
 8000934:	f003 fb11 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 30
 8000938:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800093c:	39c8      	subs	r1, #200	; 0xc8
 800093e:	2364      	movs	r3, #100	; 0x64
 8000940:	f241 3238 	movw	r2, #4920	; 0x1338
 8000944:	480e      	ldr	r0, [pc, #56]	; (8000980 <main+0x484>)
 8000946:	f003 fb08 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 31
 800094a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800094e:	39c8      	subs	r1, #200	; 0xc8
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	f241 3238 	movw	r2, #4920	; 0x1338
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <main+0x484>)
 8000958:	f003 faff 	bl	8003f5a <HAL_SPI_Receive>
	  	  HAL_SPI_Receive(&hspi1, received_data, 4920, 100); // 32
 800095c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000960:	39c8      	subs	r1, #200	; 0xc8
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	f241 3238 	movw	r2, #4920	; 0x1338
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <main+0x484>)
 800096a:	f003 faf6 	bl	8003f5a <HAL_SPI_Receive>

	  //---- END OF FRAME -----
	  HAL_SPI_Receive(&hspi1, received_data, 12, 100);
 800096e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000972:	39c8      	subs	r1, #200	; 0xc8
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	220c      	movs	r2, #12
 8000978:	4801      	ldr	r0, [pc, #4]	; (8000980 <main+0x484>)
 800097a:	f003 faee 	bl	8003f5a <HAL_SPI_Receive>
	  HAL_SPI_Transmit(&hspi1, test_pattern, 6, 1000);
 800097e:	e6b8      	b.n	80006f2 <main+0x1f6>
 8000980:	20000140 	.word	0x20000140

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0bc      	sub	sp, #240	; 0xf0
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800098e:	2244      	movs	r2, #68	; 0x44
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f004 fec6 	bl	8005724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2294      	movs	r2, #148	; 0x94
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 feb8 	bl	8005724 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 fbd1 	bl	800215c <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80009c0:	f000 fa56 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009ea:	2318      	movs	r3, #24
 80009ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fc5c 	bl	80022c4 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a12:	f000 fa2d 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f867 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a48:	f000 fa12 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1;
 8000a4c:	2324      	movs	r3, #36	; 0x24
 8000a4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fb3c 	bl	80030d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a66:	f000 fa03 	bl	8000e70 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_2);
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a72:	2000      	movs	r0, #0
 8000a74:	f002 f978 	bl	8002d68 <HAL_RCC_MCOConfig>
}
 8000a78:	bf00      	nop
 8000a7a:	37f0      	adds	r7, #240	; 0xf0
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_LPUART1_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <MX_LPUART1_UART_Init+0x98>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aca:	f004 f85d 	bl	8004b88 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f9cc 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000adc:	f004 fd19 	bl	8005512 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 f9c3 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aee:	f004 fd4e 	bl	800558e <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 f9ba 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000afe:	f004 fccf 	bl	80054a0 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f9b2 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000b4 	.word	0x200000b4
 8000b14:	40008000 	.word	0x40008000
 8000b18:	00033324 	.word	0x00033324

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <MX_USART3_UART_Init+0x94>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b66:	f004 f80f 	bl	8004b88 <HAL_UART_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f97e 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b78:	f004 fccb 	bl	8005512 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f975 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b8a:	f004 fd00 	bl	800558e <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 f96c 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b9a:	f004 fc81 	bl	80054a0 <HAL_UARTEx_DisableFifoMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f964 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bba:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <MX_SPI1_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bcc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bd0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bec:	2210      	movs	r2, #16
 8000bee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c10:	2208      	movs	r2, #8
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_SPI1_Init+0x74>)
 8000c16:	f002 ff67 	bl	8003ae8 <HAL_SPI_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000c20:	f000 f926 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000140 	.word	0x20000140
 8000c2c:	40013000 	.word	0x40013000

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_DMA_Init+0x60>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_DMA_Init+0x60>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6493      	str	r3, [r2, #72]	; 0x48
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_DMA_Init+0x60>)
 8000c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_DMA_Init+0x60>)
 8000c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <MX_DMA_Init+0x60>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6493      	str	r3, [r2, #72]	; 0x48
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <MX_DMA_Init+0x60>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	200b      	movs	r0, #11
 8000c6c:	f000 fcad 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c70:	200b      	movs	r0, #11
 8000c72:	f000 fcc6 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	200c      	movs	r0, #12
 8000c7c:	f000 fca5 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c80:	200c      	movs	r0, #12
 8000c82:	f000 fcbe 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a54      	ldr	r2, [pc, #336]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a4e      	ldr	r2, [pc, #312]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a48      	ldr	r2, [pc, #288]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a42      	ldr	r2, [pc, #264]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a3c      	ldr	r2, [pc, #240]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_GPIO_Init+0x184>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000d3a:	f001 fab3 	bl	80022a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f001 f9b7 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x188>)
 8000d52:	f001 f9b1 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4831      	ldr	r0, [pc, #196]	; (8000e20 <MX_GPIO_Init+0x18c>)
 8000d5c:	f001 f9ac 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <MX_GPIO_Init+0x190>)
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	482c      	ldr	r0, [pc, #176]	; (8000e28 <MX_GPIO_Init+0x194>)
 8000d76:	f000 ff1b 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f000 ff0c 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d98:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	481a      	ldr	r0, [pc, #104]	; (8000e1c <MX_GPIO_Init+0x188>)
 8000db2:	f000 fefd 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000db6:	2320      	movs	r3, #32
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <MX_GPIO_Init+0x18c>)
 8000dce:	f000 feef 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <MX_GPIO_Init+0x18c>)
 8000de6:	f000 fee3 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f000 fed1 	bl	8001bb0 <HAL_GPIO_Init>

}
 8000e0e:	bf00      	nop
 8000e10:	3730      	adds	r7, #48	; 0x30
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48001800 	.word	0x48001800
 8000e24:	10110000 	.word	0x10110000
 8000e28:	48000800 	.word	0x48000800

08000e2c <Toggle_GPIO_pin_Init>:

/* USER CODE BEGIN 4 */
static void Toggle_GPIO_pin_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2120      	movs	r1, #32
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f001 f936 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f000 fea4 	bl	8001bb0 <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <Error_Handler+0x6>

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <HAL_UART_MspInit+0xe0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12b      	bne.n	8000f3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ee2:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee6:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000f12:	f001 f9c7 	bl	80022a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000f16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <HAL_UART_MspInit+0xe8>)
 8000f34:	f000 fe3c 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f38:	e02d      	b.n	8000f96 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <HAL_UART_MspInit+0xec>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d128      	bne.n	8000f96 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_UART_MspInit+0xe4>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f86:	2307      	movs	r3, #7
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <HAL_UART_MspInit+0xf0>)
 8000f92:	f000 fe0d 	bl	8001bb0 <HAL_GPIO_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3730      	adds	r7, #48	; 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40008000 	.word	0x40008000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48001800 	.word	0x48001800
 8000fac:	40004800 	.word	0x40004800
 8000fb0:	48000c00 	.word	0x48000c00

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <HAL_SPI_MspInit+0x134>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	f040 8083 	bne.w	80010de <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_SPI_MspInit+0x138>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	4a43      	ldr	r2, [pc, #268]	; (80010ec <HAL_SPI_MspInit+0x138>)
 8000fde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe4:	4b41      	ldr	r3, [pc, #260]	; (80010ec <HAL_SPI_MspInit+0x138>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <HAL_SPI_MspInit+0x138>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a3d      	ldr	r2, [pc, #244]	; (80010ec <HAL_SPI_MspInit+0x138>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_SPI_MspInit+0x138>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001008:	23a0      	movs	r3, #160	; 0xa0
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001018:	2305      	movs	r3, #5
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f000 fdc3 	bl	8001bb0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_SPI_MspInit+0x140>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001032:	220a      	movs	r2, #10
 8001034:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001060:	4823      	ldr	r0, [pc, #140]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001062:	f000 faf7 	bl	8001654 <HAL_DMA_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800106c:	f7ff ff00 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001074:	659a      	str	r2, [r3, #88]	; 0x58
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_SPI_MspInit+0x13c>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_SPI_MspInit+0x148>)
 8001080:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 8001084:	220b      	movs	r2, #11
 8001086:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 800108a:	2210      	movs	r2, #16
 800108c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 80010b4:	f000 face 	bl	8001654 <HAL_DMA_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80010be:	f7ff fed7 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_SPI_MspInit+0x144>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2023      	movs	r0, #35	; 0x23
 80010d4:	f000 fa79 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010d8:	2023      	movs	r0, #35	; 0x23
 80010da:	f000 fa92 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40013000 	.word	0x40013000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	200001a4 	.word	0x200001a4
 80010f4:	40020008 	.word	0x40020008
 80010f8:	20000204 	.word	0x20000204
 80010fc:	4002001c 	.word	0x4002001c

08001100 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_SPI_MspDeInit+0x4c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d117      	bne.n	8001142 <HAL_SPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_SPI_MspDeInit+0x50>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_SPI_MspDeInit+0x50>)
 8001118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800111c:	6613      	str	r3, [r2, #96]	; 0x60

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 800111e:	21a0      	movs	r1, #160	; 0xa0
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fed6 	bl	8001ed4 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fb39 	bl	80017a4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fb34 	bl	80017a4 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800113c:	2023      	movs	r0, #35	; 0x23
 800113e:	f000 fa6e 	bl	800161e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40013000 	.word	0x40013000
 8001150:	40021000 	.word	0x40021000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a0:	f000 f8d4 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <DMA1_Channel1_IRQHandler+0x10>)
 80011ae:	f000 fbee 	bl	800198e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001a4 	.word	0x200001a4

080011bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Channel2_IRQHandler+0x10>)
 80011c2:	f000 fbe4 	bl	800198e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000204 	.word	0x20000204

080011d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <SPI1_IRQHandler+0x10>)
 80011d6:	f003 fa03 	bl	80045e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000140 	.word	0x20000140

080011e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <SystemInit+0x64>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <SystemInit+0x64>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <SystemInit+0x68>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <SystemInit+0x68>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <SystemInit+0x68>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <SystemInit+0x68>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <SystemInit+0x68>)
 8001210:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001214:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001218:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <SystemInit+0x68>)
 800121c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001220:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <SystemInit+0x68>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <SystemInit+0x68>)
 8001228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <SystemInit+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SystemInit+0x64>)
 8001236:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800123a:	609a      	str	r2, [r3, #8]
#endif
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	40021000 	.word	0x40021000

08001250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001254:	f7ff ffc6 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001258:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800125a:	e003      	b.n	8001264 <LoopCopyDataInit>

0800125c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800125e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001260:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001262:	3104      	adds	r1, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001268:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800126a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800126c:	d3f6      	bcc.n	800125c <CopyDataInit>
	ldr	r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001270:	e002      	b.n	8001278 <LoopFillZerobss>

08001272 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001272:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001274:	f842 3b04 	str.w	r3, [r2], #4

08001278 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <LoopForever+0x16>)
	cmp	r2, r3
 800127a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800127c:	d3f9      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f004 fa2d 	bl	80056dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001282:	f7ff f93b 	bl	80004fc <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001288:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800128c:	080057cc 	.word	0x080057cc
	ldr	r0, =_sdata
 8001290:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001294:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001298:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800129c:	20000268 	.word	0x20000268

080012a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_IRQHandler>

080012a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f981 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f80e 	bl	80012d4 <HAL_InitTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e001      	b.n	80012c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c4:	f7ff fdd8 	bl	8000e78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d023      	beq.n	8001330 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_InitTick+0x70>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_InitTick+0x6c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f99b 	bl	800163a <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d809      	bhi.n	8001324 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f957 	bl	80015ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0x74>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e007      	b.n	8001334 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e004      	b.n	8001334 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e001      	b.n	8001334 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	20000264 	.word	0x20000264

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000264 	.word	0x20000264

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_Delay+0x40>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db10      	blt.n	80014a4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4909      	ldr	r1, [pc, #36]	; (80014b0 <__NVIC_DisableIRQ+0x40>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	3320      	adds	r3, #32
 8001498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800149c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014a0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff07 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff1c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff0f 	bl	8001434 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff1f 	bl	8001470 <__NVIC_DisableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff94 	bl	8001570 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e08d      	b.n	8001782 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_DMA_Init+0x138>)
 800166e:	429a      	cmp	r2, r3
 8001670:	d80f      	bhi.n	8001692 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_DMA_Init+0x13c>)
 800167a:	4413      	add	r3, r2
 800167c:	4a45      	ldr	r2, [pc, #276]	; (8001794 <HAL_DMA_Init+0x140>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	009a      	lsls	r2, r3, #2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a42      	ldr	r2, [pc, #264]	; (8001798 <HAL_DMA_Init+0x144>)
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
 8001690:	e00e      	b.n	80016b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_DMA_Init+0x148>)
 800169a:	4413      	add	r3, r2
 800169c:	4a3d      	ldr	r2, [pc, #244]	; (8001794 <HAL_DMA_Init+0x140>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	009a      	lsls	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <HAL_DMA_Init+0x14c>)
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f9f2 	bl	8001aec <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001710:	d102      	bne.n	8001718 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800172c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d010      	beq.n	8001758 <HAL_DMA_Init+0x104>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d80c      	bhi.n	8001758 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fa12 	bl	8001b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e008      	b.n	800176a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020407 	.word	0x40020407
 8001790:	bffdfff8 	.word	0xbffdfff8
 8001794:	cccccccd 	.word	0xcccccccd
 8001798:	40020000 	.word	0x40020000
 800179c:	bffdfbf8 	.word	0xbffdfbf8
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07b      	b.n	80018ae <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_DMA_DeInit+0x114>)
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d80f      	bhi.n	80017f2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_DMA_DeInit+0x118>)
 80017da:	4413      	add	r3, r2
 80017dc:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <HAL_DMA_DeInit+0x11c>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <HAL_DMA_DeInit+0x120>)
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
 80017f0:	e00e      	b.n	8001810 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_DMA_DeInit+0x124>)
 80017fa:	4413      	add	r3, r2
 80017fc:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_DMA_DeInit+0x11c>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	009a      	lsls	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_DMA_DeInit+0x128>)
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f003 021c 	and.w	r2, r3, #28
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	605a      	str	r2, [r3, #4]
#if defined(DMAMUX1)

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f95d 	bl	8001aec <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001842:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00f      	beq.n	800186c <HAL_DMA_DeInit+0xc8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d80b      	bhi.n	800186c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f987 	bl	8001b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800186a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	65da      	str	r2, [r3, #92]	; 0x5c

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40020407 	.word	0x40020407
 80018bc:	bffdfff8 	.word	0xbffdfff8
 80018c0:	cccccccd 	.word	0xcccccccd
 80018c4:	40020000 	.word	0x40020000
 80018c8:	bffdfbf8 	.word	0xbffdfbf8
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d005      	beq.n	80018f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	e047      	b.n	8001984 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020e 	bic.w	r2, r2, #14
 8001902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f003 021c 	and.w	r2, r3, #28
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001940:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001958:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001962:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
    }
  }
  return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f003 031c 	and.w	r3, r3, #28
 80019ae:	2204      	movs	r2, #4
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d026      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x7a>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d021      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0204 	bic.w	r2, r2, #4
 80019e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f003 021c 	and.w	r2, r3, #28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2104      	movs	r1, #4
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d071      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	e06c      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f003 031c 	and.w	r3, r3, #28
 8001a10:	2202      	movs	r2, #2
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d02e      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xec>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d029      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10b      	bne.n	8001a4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020a 	bic.w	r2, r2, #10
 8001a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f003 021c 	and.w	r2, r3, #28
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2102      	movs	r1, #2
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d038      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a78:	e033      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 031c 	and.w	r3, r3, #28
 8001a82:	2208      	movs	r2, #8
 8001a84:	409a      	lsls	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d02a      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x156>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d025      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 020e 	bic.w	r2, r2, #14
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	f003 021c 	and.w	r2, r3, #28
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
}
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d80a      	bhi.n	8001b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6493      	str	r3, [r2, #72]	; 0x48
 8001b14:	e007      	b.n	8001b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b20:	4413      	add	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3b08      	subs	r3, #8
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40020407 	.word	0x40020407
 8001b5c:	4002081c 	.word	0x4002081c
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	40020880 	.word	0x40020880

08001b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2201      	movs	r2, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	1000823f 	.word	0x1000823f
 8001bac:	40020940 	.word	0x40020940

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e166      	b.n	8001e8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8158 	beq.w	8001e88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d00b      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d007      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bec:	2b11      	cmp	r3, #17
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 0201 	and.w	r2, r3, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0xea>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d123      	bne.n	8001ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	6939      	ldr	r1, [r7, #16]
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0203 	and.w	r2, r3, #3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80b2 	beq.w	8001e88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_GPIO_Init+0x2fc>)
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	4a60      	ldr	r2, [pc, #384]	; (8001eac <HAL_GPIO_Init+0x2fc>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_GPIO_Init+0x2fc>)
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d3c:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d66:	d02b      	beq.n	8001dc0 <HAL_GPIO_Init+0x210>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d025      	beq.n	8001dbc <HAL_GPIO_Init+0x20c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a51      	ldr	r2, [pc, #324]	; (8001eb8 <HAL_GPIO_Init+0x308>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d01f      	beq.n	8001db8 <HAL_GPIO_Init+0x208>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a50      	ldr	r2, [pc, #320]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d019      	beq.n	8001db4 <HAL_GPIO_Init+0x204>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a4f      	ldr	r2, [pc, #316]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_GPIO_Init+0x200>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <HAL_GPIO_Init+0x314>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00d      	beq.n	8001dac <HAL_GPIO_Init+0x1fc>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a4d      	ldr	r2, [pc, #308]	; (8001ec8 <HAL_GPIO_Init+0x318>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <HAL_GPIO_Init+0x31c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_GPIO_Init+0x1f4>
 8001da0:	2307      	movs	r3, #7
 8001da2:	e00e      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001da4:	2308      	movs	r3, #8
 8001da6:	e00c      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001da8:	2306      	movs	r3, #6
 8001daa:	e00a      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001dac:	2305      	movs	r3, #5
 8001dae:	e008      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001db4:	2303      	movs	r3, #3
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd2:	4937      	ldr	r1, [pc, #220]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e04:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e2e:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e34:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f ae91 	bne.w	8001bc0 <HAL_GPIO_Init+0x10>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000c00 	.word	0x48000c00
 8001ec0:	48001000 	.word	0x48001000
 8001ec4:	48001400 	.word	0x48001400
 8001ec8:	48001800 	.word	0x48001800
 8001ecc:	48001c00 	.word	0x48001c00
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001ee2:	e0c9      	b.n	8002078 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80bc 	beq.w	8002072 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001efa:	4a66      	ldr	r2, [pc, #408]	; (8002094 <HAL_GPIO_DeInit+0x1c0>)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f22:	d02b      	beq.n	8001f7c <HAL_GPIO_DeInit+0xa8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <HAL_GPIO_DeInit+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d025      	beq.n	8001f78 <HAL_GPIO_DeInit+0xa4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a5b      	ldr	r2, [pc, #364]	; (800209c <HAL_GPIO_DeInit+0x1c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d01f      	beq.n	8001f74 <HAL_GPIO_DeInit+0xa0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a5a      	ldr	r2, [pc, #360]	; (80020a0 <HAL_GPIO_DeInit+0x1cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d019      	beq.n	8001f70 <HAL_GPIO_DeInit+0x9c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a59      	ldr	r2, [pc, #356]	; (80020a4 <HAL_GPIO_DeInit+0x1d0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_GPIO_DeInit+0x98>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_GPIO_DeInit+0x1d4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_GPIO_DeInit+0x94>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_GPIO_DeInit+0x1d8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <HAL_GPIO_DeInit+0x90>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a56      	ldr	r2, [pc, #344]	; (80020b0 <HAL_GPIO_DeInit+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_GPIO_DeInit+0x8c>
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	e00e      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f60:	2308      	movs	r3, #8
 8001f62:	e00c      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f64:	2306      	movs	r3, #6
 8001f66:	e00a      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f68:	2305      	movs	r3, #5
 8001f6a:	e008      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	e006      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e004      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e002      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_GPIO_DeInit+0xaa>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	f002 0203 	and.w	r2, r2, #3
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	4093      	lsls	r3, r2
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d132      	bne.n	8001ff4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4947      	ldr	r1, [pc, #284]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4943      	ldr	r1, [pc, #268]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001faa:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4940      	ldr	r1, [pc, #256]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	493c      	ldr	r1, [pc, #240]	; (80020b4 <HAL_GPIO_DeInit+0x1e0>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <HAL_GPIO_DeInit+0x1c0>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	482b      	ldr	r0, [pc, #172]	; (8002094 <HAL_GPIO_DeInit+0x1c0>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	400a      	ands	r2, r1
 8001fee:	3302      	adds	r3, #2
 8001ff0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	08d2      	lsrs	r2, r2, #3
 8002028:	4019      	ands	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2103      	movs	r1, #3
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	2101      	movs	r1, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2103      	movs	r1, #3
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	f47f af2f 	bne.w	8001ee4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010000 	.word	0x40010000
 8002098:	48000400 	.word	0x48000400
 800209c:	48000800 	.word	0x48000800
 80020a0:	48000c00 	.word	0x48000c00
 80020a4:	48001000 	.word	0x48001000
 80020a8:	48001400 	.word	0x48001400
 80020ac:	48001800 	.word	0x48001800
 80020b0:	48001c00 	.word	0x48001c00
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	041a      	lsls	r2, r3, #16
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	43d9      	mvns	r1, r3
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	400b      	ands	r3, r1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	d102      	bne.n	8002134 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	e00b      	b.n	800214c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002142:	d102      	bne.n	800214a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002148:	e000      	b.n	800214c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800214a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000

0800215c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d141      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d131      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2232      	movs	r2, #50	; 0x32
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ae:	e002      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d102      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f2      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d158      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e057      	b.n	800228c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e2:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021ec:	e04d      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f4:	d141      	bne.n	800227a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d131      	bne.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2232      	movs	r2, #50	; 0x32
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800223a:	e002      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d102      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f2      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002262:	d112      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e011      	b.n	800228c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002278:	e007      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002288:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40007000 	.word	0x40007000
 800229c:	20000000 	.word	0x20000000
 80022a0:	431bde83 	.word	0x431bde83

080022a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b2:	6053      	str	r3, [r2, #4]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f000 bc16 	b.w	8002b04 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d8:	4ba0      	ldr	r3, [pc, #640]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e2:	4b9e      	ldr	r3, [pc, #632]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80e4 	beq.w	80024c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_RCC_OscConfig+0x4c>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	f040 808b 	bne.w	800241e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 8087 	bne.w	800241e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002310:	4b92      	ldr	r3, [pc, #584]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x64>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e3ed      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	4b8b      	ldr	r3, [pc, #556]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_RCC_OscConfig+0x7e>
 8002338:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	e005      	b.n	800234e <HAL_RCC_OscConfig+0x8a>
 8002342:	4b86      	ldr	r3, [pc, #536]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234e:	4293      	cmp	r3, r2
 8002350:	d223      	bcs.n	800239a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fdfc 	bl	8002f54 <RCC_SetFlashLatencyFromMSIRange>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3ce      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	4b7d      	ldr	r3, [pc, #500]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7c      	ldr	r2, [pc, #496]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b7a      	ldr	r3, [pc, #488]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4977      	ldr	r1, [pc, #476]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	4972      	ldr	r1, [pc, #456]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
 8002398:	e025      	b.n	80023e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6f      	ldr	r2, [pc, #444]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	496a      	ldr	r1, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fdbc 	bl	8002f54 <RCC_SetFlashLatencyFromMSIRange>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e38e      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e6:	f000 fcf3 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_RCC_OscConfig+0x29c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002402:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_OscConfig+0x2a0>)
 8002404:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002406:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_RCC_OscConfig+0x2a4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe ff62 	bl	80012d4 <HAL_InitTick>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d052      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	e372      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d032      	beq.n	800248c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4c      	ldr	r2, [pc, #304]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002432:	f7fe ff9f 	bl	8001374 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243a:	f7fe ff9b 	bl	8001374 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e35b      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b40      	ldr	r3, [pc, #256]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3f      	ldr	r2, [pc, #252]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	493a      	ldr	r1, [pc, #232]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4935      	ldr	r1, [pc, #212]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 800248a:	e01a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002498:	f7fe ff6c 	bl	8001374 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a0:	f7fe ff68 	bl	8001374 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e328      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1dc>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d073      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x21c>
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d10e      	bne.n	80024f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d063      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d15f      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e305      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x24c>
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0x288>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x270>
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x288>
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe ff0e 	bl	8001374 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255a:	e010      	b.n	800257e <HAL_RCC_OscConfig+0x2ba>
 800255c:	40021000 	.word	0x40021000
 8002560:	0800575c 	.word	0x0800575c
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe ff02 	bl	8001374 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e2c2      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	4baf      	ldr	r3, [pc, #700]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x2a8>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fef2 	bl	8001374 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe feee 	bl	8001374 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e2ae      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a6:	4ba5      	ldr	r3, [pc, #660]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x2d0>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d060      	beq.n	8002684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x310>
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d116      	bne.n	8002602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	4b99      	ldr	r3, [pc, #612]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_OscConfig+0x328>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e28b      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	4990      	ldr	r1, [pc, #576]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002600:	e040      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d023      	beq.n	8002652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a8b      	ldr	r2, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fead 	bl	8001374 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fea9 	bl	8001374 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e269      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	4b82      	ldr	r3, [pc, #520]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b7f      	ldr	r3, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	497c      	ldr	r1, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a79      	ldr	r2, [pc, #484]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fe89 	bl	8001374 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fe85 	bl	8001374 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e245      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03c      	beq.n	800270a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fe64 	bl	8001374 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fe60 	bl	8001374 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e220      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c2:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x3ec>
 80026d0:	e01b      	b.n	800270a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fe47 	bl	8001374 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fe43 	bl	8001374 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e203      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a6 	beq.w	8002864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800271c:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b44      	ldr	r3, [pc, #272]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a43      	ldr	r2, [pc, #268]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002740:	2301      	movs	r3, #1
 8002742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002744:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d118      	bne.n	8002782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275c:	f7fe fe0a 	bl	8001374 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fe06 	bl	8001374 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1c6      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002776:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_RCC_OscConfig+0x4d8>
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279a:	e024      	b.n	80027e6 <HAL_RCC_OscConfig+0x522>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d110      	bne.n	80027c6 <HAL_RCC_OscConfig+0x502>
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c4:	e00f      	b.n	80027e6 <HAL_RCC_OscConfig+0x522>
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe fdc1 	bl	8001374 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fdbd 	bl	8001374 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e17b      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ed      	beq.n	80027f6 <HAL_RCC_OscConfig+0x532>
 800281a:	e01a      	b.n	8002852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fdaa 	bl	8001374 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002822:	e00f      	b.n	8002844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7fe fda6 	bl	8001374 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d906      	bls.n	8002844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e164      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002844:	4ba8      	ldr	r3, [pc, #672]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e8      	bne.n	8002824 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4ba3      	ldr	r3, [pc, #652]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	4aa2      	ldr	r2, [pc, #648]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d03c      	beq.n	80028ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002878:	4b9b      	ldr	r3, [pc, #620]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 800287a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800287e:	4a9a      	ldr	r2, [pc, #616]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fd74 	bl	8001374 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002890:	f7fe fd70 	bl	8001374 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e130      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028a2:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 80028a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ef      	beq.n	8002890 <HAL_RCC_OscConfig+0x5cc>
 80028b0:	e01b      	b.n	80028ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 80028b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b8:	4a8b      	ldr	r2, [pc, #556]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fe fd57 	bl	8001374 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ca:	f7fe fd53 	bl	8001374 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e113      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028dc:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 80028de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ef      	bne.n	80028ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8107 	beq.w	8002b02 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f040 80cb 	bne.w	8002a94 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	429a      	cmp	r2, r3
 8002910:	d12c      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	3b01      	subs	r3, #1
 800291e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d123      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d11b      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d113      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d109      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d06d      	beq.n	8002a48 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d068      	beq.n	8002a44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002972:	4b5d      	ldr	r3, [pc, #372]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800297e:	4b5a      	ldr	r3, [pc, #360]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0ba      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800298e:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002998:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800299a:	f7fe fceb 	bl	8001374 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fce7 	bl	8001374 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0a7      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c0:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4b49      	ldr	r3, [pc, #292]	; (8002aec <HAL_RCC_OscConfig+0x828>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029d0:	3a01      	subs	r2, #1
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	4311      	orrs	r1, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029da:	0212      	lsls	r2, r2, #8
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029e2:	0852      	lsrs	r2, r2, #1
 80029e4:	3a01      	subs	r2, #1
 80029e6:	0552      	lsls	r2, r2, #21
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ee:	0852      	lsrs	r2, r2, #1
 80029f0:	3a01      	subs	r2, #1
 80029f2:	0652      	lsls	r2, r2, #25
 80029f4:	4311      	orrs	r1, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029fa:	06d2      	lsls	r2, r2, #27
 80029fc:	430a      	orrs	r2, r1
 80029fe:	493a      	ldr	r1, [pc, #232]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a37      	ldr	r2, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a34      	ldr	r2, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a1c:	f7fe fcaa 	bl	8001374 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fca6 	bl	8001374 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e066      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a42:	e05e      	b.n	8002b02 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e05d      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d156      	bne.n	8002b02 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a6c:	f7fe fc82 	bl	8001374 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fc7e 	bl	8001374 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03e      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x7b0>
 8002a92:	e036      	b.n	8002b02 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d031      	beq.n	8002afe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002ab8:	f023 0303 	bic.w	r3, r3, #3
 8002abc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002ac4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002acc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe fc51 	bl	8001374 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad4:	e00c      	b.n	8002af0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe fc4d 	bl	8001374 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d905      	bls.n	8002af0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e00d      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_OscConfig+0x848>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1ec      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x812>
 8002afc:	e001      	b.n	8002b02 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e10f      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b89      	ldr	r3, [pc, #548]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b86      	ldr	r3, [pc, #536]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	4984      	ldr	r1, [pc, #528]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0f7      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8089 	beq.w	8002c78 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d133      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	4b79      	ldr	r3, [pc, #484]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e4      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002b7e:	f000 fa43 	bl	8003008 <RCC_GetSysClockFreqFromPLLSource>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b74      	ldr	r3, [pc, #464]	; (8002d58 <HAL_RCC_ClockConfig+0x248>)
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d955      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b8a:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9e:	4a6d      	ldr	r2, [pc, #436]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e044      	b.n	8002c36 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d03e      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x126>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d13a      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bc0:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc8:	4a62      	ldr	r2, [pc, #392]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e02f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0ac      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf6:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0a0      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e098      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c16:	f000 f8db 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b4e      	ldr	r3, [pc, #312]	; (8002d58 <HAL_RCC_ClockConfig+0x248>)
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d909      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2a:	4a4a      	ldr	r2, [pc, #296]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4944      	ldr	r1, [pc, #272]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fe fb94 	bl	8001374 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fb90 	bl	8001374 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e070      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4930      	ldr	r1, [pc, #192]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
 8002c96:	e008      	b.n	8002caa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d105      	bne.n	8002caa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002caa:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d210      	bcs.n	8002cda <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 020f 	bic.w	r2, r3, #15
 8002cc0:	4923      	ldr	r1, [pc, #140]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_RCC_ClockConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e036      	b.n	8002d48 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4918      	ldr	r1, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4910      	ldr	r1, [pc, #64]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d18:	f000 f85a 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d1c:	4601      	mov	r1, r0
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <HAL_RCC_ClockConfig+0x24c>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	fa21 f303 	lsr.w	r3, r1, r3
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x250>)
 8002d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x254>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fac9 	bl	80012d4 <HAL_InitTick>
 8002d42:	4603      	mov	r3, r0
 8002d44:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40021000 	.word	0x40021000
 8002d58:	04c4b400 	.word	0x04c4b400
 8002d5c:	0800575c 	.word	0x0800575c
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_RCC_MCOConfig+0x64>)
 8002d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <HAL_RCC_MCOConfig+0x64>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_MCOConfig+0x64>)
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d96:	2302      	movs	r3, #2
 8002d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dac:	f7fe ff00 	bl	8001bb0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_MCOConfig+0x64>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCC_MCOConfig+0x64>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de8:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x34>
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d121      	bne.n	8002e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d11e      	bne.n	8002e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e04:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e005      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e20:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d102      	bne.n	8002e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	e004      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d133      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0xaa>
 8002e72:	e005      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e76:	617b      	str	r3, [r7, #20]
      break;
 8002e78:	e005      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e7c:	617b      	str	r3, [r7, #20]
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	617b      	str	r3, [r7, #20]
      break;
 8002e84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	3301      	adds	r3, #1
 8002e92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	fb02 f203 	mul.w	r2, r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0e5b      	lsrs	r3, r3, #25
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3724      	adds	r7, #36	; 0x24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08005774 	.word	0x08005774
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4601      	mov	r1, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	0800576c 	.word	0x0800576c

08002f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f2c:	f7ff ffda 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f30:	4601      	mov	r1, r0
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0adb      	lsrs	r3, r3, #11
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800576c 	.word	0x0800576c

08002f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f6c:	f7ff f8d6 	bl	800211c <HAL_PWREx_GetVoltageRange>
 8002f70:	6178      	str	r0, [r7, #20]
 8002f72:	e014      	b.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f80:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f8c:	f7ff f8c6 	bl	800211c <HAL_PWREx_GetVoltageRange>
 8002f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa4:	d10b      	bne.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d913      	bls.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2ba0      	cmp	r3, #160	; 0xa0
 8002fb0:	d902      	bls.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	e00d      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb8:	2301      	movs	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e00a      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc2:	d902      	bls.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e004      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b70      	cmp	r3, #112	; 0x70
 8002fce:	d101      	bne.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 020f 	bic.w	r2, r3, #15
 8002fdc:	4909      	ldr	r1, [pc, #36]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d001      	beq.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	40022000 	.word	0x40022000

08003008 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003012:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d118      	bne.n	8003050 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e005      	b.n	8003046 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800303a:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003046:	4a21      	ldr	r2, [pc, #132]	; (80030cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d002      	beq.n	8003066 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003060:	2b03      	cmp	r3, #3
 8003062:	d003      	beq.n	800306c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003064:	e005      	b.n	8003072 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003068:	613b      	str	r3, [r7, #16]
    break;
 800306a:	e005      	b.n	8003078 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800306e:	613b      	str	r3, [r7, #16]
    break;
 8003070:	e002      	b.n	8003078 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	613b      	str	r3, [r7, #16]
    break;
 8003076:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3301      	adds	r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	fb02 f203 	mul.w	r2, r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	0e5b      	lsrs	r3, r3, #25
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	3301      	adds	r3, #1
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030b8:	683b      	ldr	r3, [r7, #0]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	08005774 	.word	0x08005774
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	007a1200 	.word	0x007a1200

080030d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030e0:	2300      	movs	r3, #0
 80030e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e4:	2300      	movs	r3, #0
 80030e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d03d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d00b      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d804      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d015      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003108:	e01d      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800310a:	2b60      	cmp	r3, #96	; 0x60
 800310c:	d01e      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d01c      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003112:	e018      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003114:	4b86      	ldr	r3, [pc, #536]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a85      	ldr	r2, [pc, #532]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003120:	e015      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fafd 	bl	8003728 <RCCEx_PLLSAI1_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003132:	e00c      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3320      	adds	r3, #32
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fbe4 	bl	8003908 <RCCEx_PLLSAI2_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	74fb      	strb	r3, [r7, #19]
      break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800314c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003154:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800315a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003162:	4973      	ldr	r1, [pc, #460]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800316a:	e001      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d042      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003184:	d00f      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318a:	d805      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d011      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003194:	d017      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003196:	e01f      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319c:	d01f      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x106>
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d01c      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031a4:	e018      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031a6:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	4a61      	ldr	r2, [pc, #388]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b2:	e015      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fab4 	bl	8003728 <RCCEx_PLLSAI1_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c4:	e00c      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3320      	adds	r3, #32
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fb9b 	bl	8003908 <RCCEx_PLLSAI2_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d6:	e003      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	74fb      	strb	r3, [r7, #19]
      break;
 80031dc:	e000      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80031de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e6:	4b52      	ldr	r3, [pc, #328]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	494e      	ldr	r1, [pc, #312]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031fc:	e001      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 809f 	beq.w	800334e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003210:	2300      	movs	r3, #0
 8003212:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003214:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	4a40      	ldr	r2, [pc, #256]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6593      	str	r3, [r2, #88]	; 0x58
 8003236:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003252:	f7fe f88f 	bl	8001374 <HAL_GetTick>
 8003256:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003258:	e009      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fe f88b 	bl	8001374 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d902      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	74fb      	strb	r3, [r7, #19]
        break;
 800326c:	e005      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326e:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ef      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d15b      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01f      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	429a      	cmp	r2, r3
 800329c:	d019      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ca:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d016      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe f84a 	bl	8001374 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	e00b      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe f846 	bl	8001374 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d902      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	74fb      	strb	r3, [r7, #19]
            break;
 80032fa:	e006      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ec      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10c      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	4903      	ldr	r1, [pc, #12]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003328:	e008      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	74bb      	strb	r3, [r7, #18]
 800332e:	e005      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333c:	7c7b      	ldrb	r3, [r7, #17]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a9f      	ldr	r2, [pc, #636]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335a:	4b9a      	ldr	r3, [pc, #616]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 0203 	bic.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	4996      	ldr	r1, [pc, #600]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337c:	4b91      	ldr	r3, [pc, #580]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 020c 	bic.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	498e      	ldr	r1, [pc, #568]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	4985      	ldr	r1, [pc, #532]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c0:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	497d      	ldr	r1, [pc, #500]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e2:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f0:	4974      	ldr	r1, [pc, #464]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	496c      	ldr	r1, [pc, #432]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003434:	4963      	ldr	r1, [pc, #396]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003456:	495b      	ldr	r1, [pc, #364]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	4952      	ldr	r1, [pc, #328]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800348c:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	494a      	ldr	r1, [pc, #296]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ae:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	4941      	ldr	r1, [pc, #260]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034d0:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	4939      	ldr	r1, [pc, #228]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d028      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003500:	4930      	ldr	r1, [pc, #192]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003510:	d106      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003512:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351c:	60d3      	str	r3, [r2, #12]
 800351e:	e011      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003528:	d10c      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f8f9 	bl	8003728 <RCCEx_PLLSAI1_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d04d      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003558:	d108      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003566:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800356a:	e012      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800356c:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003572:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003578:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358a:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359a:	d106      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	e020      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a02      	ldr	r2, [pc, #8]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	60d3      	str	r3, [r2, #12]
 80035c0:	e014      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2101      	movs	r1, #1
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f8a5 	bl	8003728 <RCCEx_PLLSAI1_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d028      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003606:	4947      	ldr	r1, [pc, #284]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003616:	d106      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800361e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003622:	60d3      	str	r3, [r2, #12]
 8003624:	e011      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800362e:	d10c      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f876 	bl	8003728 <RCCEx_PLLSAI1_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003666:	492f      	ldr	r1, [pc, #188]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f851 	bl	8003728 <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a6:	f023 0204 	bic.w	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b0:	491c      	ldr	r1, [pc, #112]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036c4:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ca:	f023 0218 	bic.w	r2, r3, #24
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	4913      	ldr	r1, [pc, #76]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f8:	490a      	ldr	r1, [pc, #40]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370a:	d105      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003716:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003718:	7cbb      	ldrb	r3, [r7, #18]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000

08003728 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003736:	4b70      	ldr	r3, [pc, #448]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003742:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0203 	and.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d103      	bne.n	800375a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
       ||
 8003756:	2b00      	cmp	r3, #0
 8003758:	d13f      	bne.n	80037da <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	e03c      	b.n	80037da <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d00c      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x5a>
 8003768:	2b03      	cmp	r3, #3
 800376a:	d013      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x6c>
 800376c:	2b01      	cmp	r3, #1
 800376e:	d120      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003770:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11d      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e01a      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003782:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003792:	e013      	b.n	80037bc <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037a0:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037b0:	e006      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      break;
 80037b6:	e004      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80037b8:	bf00      	nop
 80037ba:	e002      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80037c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80037c8:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f023 0203 	bic.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4948      	ldr	r1, [pc, #288]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 8086 	bne.w	80038ee <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037e2:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ee:	f7fd fdc1 	bl	8001374 <HAL_GetTick>
 80037f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f4:	e009      	b.n	800380a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f6:	f7fd fdbd 	bl	8001374 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	73fb      	strb	r3, [r7, #15]
        break;
 8003808:	e005      	b.n	8003816 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ef      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d168      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003822:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	4b35      	ldr	r3, [pc, #212]	; (80038fc <RCCEx_PLLSAI1_Config+0x1d4>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	06d2      	lsls	r2, r2, #27
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	3a01      	subs	r2, #1
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	430a      	orrs	r2, r1
 8003842:	492d      	ldr	r1, [pc, #180]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]
 8003848:	e02d      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003856:	4013      	ands	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	0211      	lsls	r1, r2, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6912      	ldr	r2, [r2, #16]
 8003862:	0852      	lsrs	r2, r2, #1
 8003864:	3a01      	subs	r2, #1
 8003866:	0552      	lsls	r2, r2, #21
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6852      	ldr	r2, [r2, #4]
 800386e:	3a01      	subs	r2, #1
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	4920      	ldr	r1, [pc, #128]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003876:	4313      	orrs	r3, r2
 8003878:	610b      	str	r3, [r1, #16]
 800387a:	e014      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6952      	ldr	r2, [r2, #20]
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	3a01      	subs	r2, #1
 8003892:	0652      	lsls	r2, r2, #25
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6852      	ldr	r2, [r2, #4]
 800389a:	3a01      	subs	r2, #1
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	430a      	orrs	r2, r1
 80038a0:	4915      	ldr	r1, [pc, #84]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fd fd5f 	bl	8001374 <HAL_GetTick>
 80038b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b8:	e009      	b.n	80038ce <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ba:	f7fd fd5b 	bl	8001374 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d902      	bls.n	80038ce <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	73fb      	strb	r3, [r7, #15]
          break;
 80038cc:	e005      	b.n	80038da <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ef      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	07ff800f 	.word	0x07ff800f
 8003900:	ff9f800f 	.word	0xff9f800f
 8003904:	f9ff800f 	.word	0xf9ff800f

08003908 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003916:	4b70      	ldr	r3, [pc, #448]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003922:	4b6d      	ldr	r3, [pc, #436]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d103      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
       ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13f      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	e03c      	b.n	80039ba <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d00c      	beq.n	8003962 <RCCEx_PLLSAI2_Config+0x5a>
 8003948:	2b03      	cmp	r3, #3
 800394a:	d013      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x6c>
 800394c:	2b01      	cmp	r3, #1
 800394e:	d120      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003950:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11d      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e01a      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003962:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e013      	b.n	800399c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003974:	4b58      	ldr	r3, [pc, #352]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003980:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003990:	e006      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      break;
 8003996:	e004      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003998:	bf00      	nop
 800399a:	e002      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80039a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80039a8:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f023 0203 	bic.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4948      	ldr	r1, [pc, #288]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 8086 	bne.w	8003ace <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039c2:	4b45      	ldr	r3, [pc, #276]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fd fcd1 	bl	8001374 <HAL_GetTick>
 80039d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d4:	e009      	b.n	80039ea <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d6:	f7fd fccd 	bl	8001374 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d902      	bls.n	80039ea <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	73fb      	strb	r3, [r7, #15]
        break;
 80039e8:	e005      	b.n	80039f6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ea:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ef      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d168      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a02:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	4b35      	ldr	r3, [pc, #212]	; (8003adc <RCCEx_PLLSAI2_Config+0x1d4>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6892      	ldr	r2, [r2, #8]
 8003a0e:	0211      	lsls	r1, r2, #8
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68d2      	ldr	r2, [r2, #12]
 8003a14:	06d2      	lsls	r2, r2, #27
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6852      	ldr	r2, [r2, #4]
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	430a      	orrs	r2, r1
 8003a22:	492d      	ldr	r1, [pc, #180]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	614b      	str	r3, [r1, #20]
 8003a28:	e02d      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d115      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a30:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	0211      	lsls	r1, r2, #8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6912      	ldr	r2, [r2, #16]
 8003a42:	0852      	lsrs	r2, r2, #1
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0552      	lsls	r2, r2, #21
 8003a48:	4311      	orrs	r1, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6852      	ldr	r2, [r2, #4]
 8003a4e:	3a01      	subs	r2, #1
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	430a      	orrs	r2, r1
 8003a54:	4920      	ldr	r1, [pc, #128]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	614b      	str	r3, [r1, #20]
 8003a5a:	e014      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6952      	ldr	r2, [r2, #20]
 8003a6e:	0852      	lsrs	r2, r2, #1
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0652      	lsls	r2, r2, #25
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6852      	ldr	r2, [r2, #4]
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	0112      	lsls	r2, r2, #4
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	4915      	ldr	r1, [pc, #84]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a86:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fd fc6f 	bl	8001374 <HAL_GetTick>
 8003a96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a98:	e009      	b.n	8003aae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a9a:	f7fd fc6b 	bl	8001374 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d902      	bls.n	8003aae <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	73fb      	strb	r3, [r7, #15]
          break;
 8003aac:	e005      	b.n	8003aba <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ef      	beq.n	8003a9a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	07ff800f 	.word	0x07ff800f
 8003ae0:	ff9f800f 	.word	0xff9f800f
 8003ae4:	f9ff800f 	.word	0xf9ff800f

08003ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e095      	b.n	8003c26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0a:	d009      	beq.n	8003b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
 8003b12:	e005      	b.n	8003b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fa3a 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b60:	d902      	bls.n	8003b68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	e002      	b.n	8003b6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b76:	d007      	beq.n	8003b88 <HAL_SPI_Init+0xa0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	ea42 0103 	orr.w	r1, r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	f003 0204 	and.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c04:	ea42 0103 	orr.w	r1, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e01a      	b.n	8003c76 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fd fa51 	bl	8001100 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b088      	sub	sp, #32
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_SPI_Transmit+0x22>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e158      	b.n	8003f52 <HAL_SPI_Transmit+0x2d4>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca8:	f7fd fb64 	bl	8001374 <HAL_GetTick>
 8003cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc2:	e13d      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x52>
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd4:	e134      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	d10f      	bne.n	8003d42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d007      	beq.n	8003d60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d68:	d94b      	bls.n	8003e02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0xfa>
 8003d72:	8afb      	ldrh	r3, [r7, #22]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d13e      	bne.n	8003df6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d9c:	e02b      	b.n	8003df6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d112      	bne.n	8003dd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd0:	e011      	b.n	8003df6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fd facf 	bl	8001374 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Transmit+0x16c>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x172>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df4:	e0a4      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ce      	bne.n	8003d9e <HAL_SPI_Transmit+0x120>
 8003e00:	e07c      	b.n	8003efc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_SPI_Transmit+0x192>
 8003e0a:	8afb      	ldrh	r3, [r7, #22]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d170      	bne.n	8003ef2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d912      	bls.n	8003e40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b02      	subs	r3, #2
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3e:	e058      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e66:	e044      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d12b      	bne.n	8003ece <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d912      	bls.n	8003ea6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea4:	e025      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ecc:	e011      	b.n	8003ef2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ece:	f7fd fa51 	bl	8001374 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d803      	bhi.n	8003ee6 <HAL_SPI_Transmit+0x268>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_Transmit+0x26e>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef0:	e026      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1b5      	bne.n	8003e68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fdfb 	bl	8004afc <SPI_EndRxTxTransaction>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e000      	b.n	8003f40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af02      	add	r7, sp, #8
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d112      	bne.n	8003f9e <HAL_SPI_Receive+0x44>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10e      	bne.n	8003f9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2204      	movs	r2, #4
 8003f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f910 	bl	80041ba <HAL_SPI_TransmitReceive>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	e109      	b.n	80041b2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Receive+0x52>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e102      	b.n	80041b2 <HAL_SPI_Receive+0x258>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb4:	f7fd f9de 	bl	8001374 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fca:	e0e9      	b.n	80041a0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Receive+0x7e>
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fdc:	e0e0      	b.n	80041a0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004028:	d908      	bls.n	800403c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	e007      	b.n	800404c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004054:	d10f      	bne.n	8004076 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d007      	beq.n	8004094 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409c:	d867      	bhi.n	800416e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800409e:	e030      	b.n	8004102 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d117      	bne.n	80040de <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f103 020c 	add.w	r2, r3, #12
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040dc:	e011      	b.n	8004102 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040de:	f7fd f949 	bl	8001374 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d803      	bhi.n	80040f6 <HAL_SPI_Receive+0x19c>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d102      	bne.n	80040fc <HAL_SPI_Receive+0x1a2>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004100:	e04e      	b.n	80041a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1c8      	bne.n	80040a0 <HAL_SPI_Receive+0x146>
 800410e:	e034      	b.n	800417a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d115      	bne.n	800414a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	b292      	uxth	r2, r2
 800412a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004148:	e011      	b.n	800416e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414a:	f7fd f913 	bl	8001374 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d803      	bhi.n	8004162 <HAL_SPI_Receive+0x208>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d102      	bne.n	8004168 <HAL_SPI_Receive+0x20e>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800416c:	e018      	b.n	80041a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ca      	bne.n	8004110 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fc64 	bl	8004a4c <SPI_EndRxTransaction>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
 800419c:	e000      	b.n	80041a0 <HAL_SPI_Receive+0x246>
  }

error :
 800419e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041c8:	2301      	movs	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x26>
 80041dc:	2302      	movs	r3, #2
 80041de:	e1fb      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x41e>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e8:	f7fd f8c4 	bl	8001374 <HAL_GetTick>
 80041ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004204:	7efb      	ldrb	r3, [r7, #27]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d00e      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x6e>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004210:	d106      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x66>
 800421a:	7efb      	ldrb	r3, [r7, #27]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d003      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004226:	e1cd      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_SPI_TransmitReceive+0x80>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SPI_TransmitReceive+0x80>
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004240:	e1c0      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b04      	cmp	r3, #4
 800424c:	d003      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2205      	movs	r2, #5
 8004252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004298:	d802      	bhi.n	80042a0 <HAL_SPI_TransmitReceive+0xe6>
 800429a:	8a3b      	ldrh	r3, [r7, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d908      	bls.n	80042b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	e007      	b.n	80042c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d007      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e8:	d97c      	bls.n	80043e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x13e>
 80042f2:	8a7b      	ldrh	r3, [r7, #18]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d169      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431c:	e056      	b.n	80043cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d11b      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x1aa>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x1aa>
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	2b01      	cmp	r3, #1
 800433a:	d113      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d11c      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x1f2>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	b292      	uxth	r2, r2
 800438a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a8:	2301      	movs	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043ac:	f7fc ffe2 	bl	8001374 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d807      	bhi.n	80043cc <HAL_SPI_TransmitReceive+0x212>
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d003      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043ca:	e0fb      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1a3      	bne.n	800431e <HAL_SPI_TransmitReceive+0x164>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d19d      	bne.n	800431e <HAL_SPI_TransmitReceive+0x164>
 80043e2:	e0df      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x23a>
 80043ec:	8a7b      	ldrh	r3, [r7, #18]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f040 80cb 	bne.w	800458a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d912      	bls.n	8004424 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b02      	subs	r3, #2
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004422:	e0b2      	b.n	800458a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800444a:	e09e      	b.n	800458a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d134      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x30a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02f      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x30a>
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2b01      	cmp	r3, #1
 8004468:	d12c      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d912      	bls.n	800449a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b02      	subs	r3, #2
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004498:	e012      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d148      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x3aa>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d042      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d923      	bls.n	8004532 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	b292      	uxth	r2, r2
 80044f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b02      	subs	r3, #2
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d81f      	bhi.n	8004560 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e016      	b.n	8004560 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f103 020c 	add.w	r2, r3, #12
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	7812      	ldrb	r2, [r2, #0]
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004560:	2301      	movs	r3, #1
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004564:	f7fc ff06 	bl	8001374 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004570:	429a      	cmp	r2, r3
 8004572:	d803      	bhi.n	800457c <HAL_SPI_TransmitReceive+0x3c2>
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d102      	bne.n	8004582 <HAL_SPI_TransmitReceive+0x3c8>
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004588:	e01c      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af5b 	bne.w	800444c <HAL_SPI_TransmitReceive+0x292>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f47f af54 	bne.w	800444c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 faa7 	bl	8004afc <SPI_EndRxTxTransaction>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
 80045c0:	e000      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10f      	bne.n	8004624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
    return;
 8004622:	e0d8      	b.n	80047d6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_SPI_IRQHandler+0x66>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	09db      	lsrs	r3, r3, #7
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
    return;
 8004644:	e0c7      	b.n	80047d6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_SPI_IRQHandler+0x8c>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80b5 	beq.w	80047d6 <HAL_SPI_IRQHandler+0x1f6>
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80ae 	beq.w	80047d6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	099b      	lsrs	r3, r3, #6
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d023      	beq.n	80046ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d011      	beq.n	80046b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004696:	f043 0204 	orr.w	r2, r3, #4
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	e00b      	b.n	80046ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]
        return;
 80046cc:	e083      	b.n	80047d6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00c      	beq.n	800472a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	f043 0208 	orr.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	2b00      	cmp	r3, #0
 8004730:	d050      	beq.n	80047d4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004740:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_SPI_IRQHandler+0x17e>
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d034      	beq.n	80047c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0203 	bic.w	r2, r2, #3
 800476c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	2b00      	cmp	r3, #0
 8004774:	d011      	beq.n	800479a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_SPI_IRQHandler+0x1fc>)
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd f8a4 	bl	80018d0 <HAL_DMA_Abort_IT>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <HAL_SPI_IRQHandler+0x1fc>)
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd f88e 	bl	80018d0 <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80047c6:	e003      	b.n	80047d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f809 	bl	80047e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047ce:	e000      	b.n	80047d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80047d0:	bf00      	nop
    return;
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
  }
}
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	080047f5 	.word	0x080047f5

080047e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ffe5 	bl	80047e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004830:	f7fc fda0 	bl	8001374 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4413      	add	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004840:	f7fc fd98 	bl	8001374 <HAL_GetTick>
 8004844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	015b      	lsls	r3, r3, #5
 800484c:	0d1b      	lsrs	r3, r3, #20
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004856:	e054      	b.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d050      	beq.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004860:	f7fc fd88 	bl	8001374 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	429a      	cmp	r2, r3
 800486e:	d902      	bls.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d13d      	bne.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488e:	d111      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004898:	d004      	beq.n	80048a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a2:	d107      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048bc:	d10f      	bne.n	80048de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e017      	b.n	8004922 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3b01      	subs	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	429a      	cmp	r2, r3
 800491e:	d19b      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000000 	.word	0x20000000

08004930 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800493e:	f7fc fd19 	bl	8001374 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800494e:	f7fc fd11 	bl	8001374 <HAL_GetTick>
 8004952:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	00da      	lsls	r2, r3, #3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	0d1b      	lsrs	r3, r3, #20
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800496c:	e05f      	b.n	8004a2e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004974:	d106      	bne.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d050      	beq.n	8004a2e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800498c:	f7fc fcf2 	bl	8001374 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	d902      	bls.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x72>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d13d      	bne.n	8004a1e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d111      	bne.n	80049e0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d004      	beq.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ce:	d107      	bne.n	80049e0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d10f      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e010      	b.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d197      	bne.n	800496e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000000 	.word	0x20000000

08004a4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a60:	d111      	bne.n	8004a86 <SPI_EndRxTransaction+0x3a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6a:	d004      	beq.n	8004a76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a74:	d107      	bne.n	8004a86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a84:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2180      	movs	r1, #128	; 0x80
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff fec5 	bl	8004820 <SPI_WaitFlagStateUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e023      	b.n	8004af4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab4:	d11d      	bne.n	8004af2 <SPI_EndRxTransaction+0xa6>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abe:	d004      	beq.n	8004aca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac8:	d113      	bne.n	8004af2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff ff2a 	bl	8004930 <SPI_WaitFifoStateUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e000      	b.n	8004af4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff ff0b 	bl	8004930 <SPI_WaitFifoStateUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e027      	b.n	8004b80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff fe70 	bl	8004820 <SPI_WaitFlagStateUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e014      	b.n	8004b80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff fee4 	bl	8004930 <SPI_WaitFifoStateUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e000      	b.n	8004b80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e042      	b.n	8004c20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc f987 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2224      	movs	r2, #36	; 0x24
 8004bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f82c 	bl	8004c28 <UART_SetConfig>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e022      	b.n	8004c20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 faf2 	bl	80051cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fb79 	bl	8005310 <UART_CheckIdleState>
 8004c1e:	4603      	mov	r3, r0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c2c:	b088      	sub	sp, #32
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4bb1      	ldr	r3, [pc, #708]	; (8004f24 <UART_SetConfig+0x2fc>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4aa6      	ldr	r2, [pc, #664]	; (8004f28 <UART_SetConfig+0x300>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ca6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	69f9      	ldr	r1, [r7, #28]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f023 010f 	bic.w	r1, r3, #15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a97      	ldr	r2, [pc, #604]	; (8004f2c <UART_SetConfig+0x304>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d121      	bne.n	8004d18 <UART_SetConfig+0xf0>
 8004cd4:	4b96      	ldr	r3, [pc, #600]	; (8004f30 <UART_SetConfig+0x308>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d816      	bhi.n	8004d10 <UART_SetConfig+0xe8>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0xc0>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d05 	.word	0x08004d05
 8004cf0:	08004cff 	.word	0x08004cff
 8004cf4:	08004d0b 	.word	0x08004d0b
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	76fb      	strb	r3, [r7, #27]
 8004cfc:	e0e8      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	76fb      	strb	r3, [r7, #27]
 8004d02:	e0e5      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d04:	2304      	movs	r3, #4
 8004d06:	76fb      	strb	r3, [r7, #27]
 8004d08:	e0e2      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	76fb      	strb	r3, [r7, #27]
 8004d0e:	e0df      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d10:	2310      	movs	r3, #16
 8004d12:	76fb      	strb	r3, [r7, #27]
 8004d14:	bf00      	nop
 8004d16:	e0db      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a85      	ldr	r2, [pc, #532]	; (8004f34 <UART_SetConfig+0x30c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d134      	bne.n	8004d8c <UART_SetConfig+0x164>
 8004d22:	4b83      	ldr	r3, [pc, #524]	; (8004f30 <UART_SetConfig+0x308>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d829      	bhi.n	8004d84 <UART_SetConfig+0x15c>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x110>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d85 	.word	0x08004d85
 8004d40:	08004d85 	.word	0x08004d85
 8004d44:	08004d85 	.word	0x08004d85
 8004d48:	08004d79 	.word	0x08004d79
 8004d4c:	08004d85 	.word	0x08004d85
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004d85 	.word	0x08004d85
 8004d58:	08004d73 	.word	0x08004d73
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d85 	.word	0x08004d85
 8004d68:	08004d7f 	.word	0x08004d7f
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	76fb      	strb	r3, [r7, #27]
 8004d70:	e0ae      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d72:	2302      	movs	r3, #2
 8004d74:	76fb      	strb	r3, [r7, #27]
 8004d76:	e0ab      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	76fb      	strb	r3, [r7, #27]
 8004d7c:	e0a8      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d7e:	2308      	movs	r3, #8
 8004d80:	76fb      	strb	r3, [r7, #27]
 8004d82:	e0a5      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d84:	2310      	movs	r3, #16
 8004d86:	76fb      	strb	r3, [r7, #27]
 8004d88:	bf00      	nop
 8004d8a:	e0a1      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a69      	ldr	r2, [pc, #420]	; (8004f38 <UART_SetConfig+0x310>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d120      	bne.n	8004dd8 <UART_SetConfig+0x1b0>
 8004d96:	4b66      	ldr	r3, [pc, #408]	; (8004f30 <UART_SetConfig+0x308>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d00f      	beq.n	8004dc4 <UART_SetConfig+0x19c>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d802      	bhi.n	8004dae <UART_SetConfig+0x186>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <UART_SetConfig+0x190>
 8004dac:	e010      	b.n	8004dd0 <UART_SetConfig+0x1a8>
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d005      	beq.n	8004dbe <UART_SetConfig+0x196>
 8004db2:	2b30      	cmp	r3, #48	; 0x30
 8004db4:	d009      	beq.n	8004dca <UART_SetConfig+0x1a2>
 8004db6:	e00b      	b.n	8004dd0 <UART_SetConfig+0x1a8>
 8004db8:	2300      	movs	r3, #0
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	e088      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	76fb      	strb	r3, [r7, #27]
 8004dc2:	e085      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e082      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	76fb      	strb	r3, [r7, #27]
 8004dce:	e07f      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	76fb      	strb	r3, [r7, #27]
 8004dd4:	bf00      	nop
 8004dd6:	e07b      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a57      	ldr	r2, [pc, #348]	; (8004f3c <UART_SetConfig+0x314>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d120      	bne.n	8004e24 <UART_SetConfig+0x1fc>
 8004de2:	4b53      	ldr	r3, [pc, #332]	; (8004f30 <UART_SetConfig+0x308>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d00f      	beq.n	8004e10 <UART_SetConfig+0x1e8>
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d802      	bhi.n	8004dfa <UART_SetConfig+0x1d2>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <UART_SetConfig+0x1dc>
 8004df8:	e010      	b.n	8004e1c <UART_SetConfig+0x1f4>
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d005      	beq.n	8004e0a <UART_SetConfig+0x1e2>
 8004dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004e00:	d009      	beq.n	8004e16 <UART_SetConfig+0x1ee>
 8004e02:	e00b      	b.n	8004e1c <UART_SetConfig+0x1f4>
 8004e04:	2300      	movs	r3, #0
 8004e06:	76fb      	strb	r3, [r7, #27]
 8004e08:	e062      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	76fb      	strb	r3, [r7, #27]
 8004e0e:	e05f      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e10:	2304      	movs	r3, #4
 8004e12:	76fb      	strb	r3, [r7, #27]
 8004e14:	e05c      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e16:	2308      	movs	r3, #8
 8004e18:	76fb      	strb	r3, [r7, #27]
 8004e1a:	e059      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	76fb      	strb	r3, [r7, #27]
 8004e20:	bf00      	nop
 8004e22:	e055      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a45      	ldr	r2, [pc, #276]	; (8004f40 <UART_SetConfig+0x318>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d124      	bne.n	8004e78 <UART_SetConfig+0x250>
 8004e2e:	4b40      	ldr	r3, [pc, #256]	; (8004f30 <UART_SetConfig+0x308>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3c:	d012      	beq.n	8004e64 <UART_SetConfig+0x23c>
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	d802      	bhi.n	8004e4a <UART_SetConfig+0x222>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <UART_SetConfig+0x230>
 8004e48:	e012      	b.n	8004e70 <UART_SetConfig+0x248>
 8004e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x236>
 8004e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e54:	d009      	beq.n	8004e6a <UART_SetConfig+0x242>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x248>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	e038      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	76fb      	strb	r3, [r7, #27]
 8004e62:	e035      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e64:	2304      	movs	r3, #4
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e032      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e02f      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e70:	2310      	movs	r3, #16
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	bf00      	nop
 8004e76:	e02b      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <UART_SetConfig+0x300>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d124      	bne.n	8004ecc <UART_SetConfig+0x2a4>
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <UART_SetConfig+0x308>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d012      	beq.n	8004eb8 <UART_SetConfig+0x290>
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	d802      	bhi.n	8004e9e <UART_SetConfig+0x276>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <UART_SetConfig+0x284>
 8004e9c:	e012      	b.n	8004ec4 <UART_SetConfig+0x29c>
 8004e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea2:	d006      	beq.n	8004eb2 <UART_SetConfig+0x28a>
 8004ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea8:	d009      	beq.n	8004ebe <UART_SetConfig+0x296>
 8004eaa:	e00b      	b.n	8004ec4 <UART_SetConfig+0x29c>
 8004eac:	2300      	movs	r3, #0
 8004eae:	76fb      	strb	r3, [r7, #27]
 8004eb0:	e00e      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	76fb      	strb	r3, [r7, #27]
 8004eb6:	e00b      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	76fb      	strb	r3, [r7, #27]
 8004ebc:	e008      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	76fb      	strb	r3, [r7, #27]
 8004ec2:	e005      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	76fb      	strb	r3, [r7, #27]
 8004ec8:	bf00      	nop
 8004eca:	e001      	b.n	8004ed0 <UART_SetConfig+0x2a8>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <UART_SetConfig+0x300>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f040 80a1 	bne.w	800501e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004edc:	7efb      	ldrb	r3, [r7, #27]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d836      	bhi.n	8004f50 <UART_SetConfig+0x328>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x2c0>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f51 	.word	0x08004f51
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f1b 	.word	0x08004f1b
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f51 	.word	0x08004f51
 8004f08:	08004f49 	.word	0x08004f49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7fd fff6 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8004f10:	6178      	str	r0, [r7, #20]
        break;
 8004f12:	e022      	b.n	8004f5a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <UART_SetConfig+0x31c>)
 8004f16:	617b      	str	r3, [r7, #20]
        break;
 8004f18:	e01f      	b.n	8004f5a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1a:	f7fd ff59 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8004f1e:	6178      	str	r0, [r7, #20]
        break;
 8004f20:	e01b      	b.n	8004f5a <UART_SetConfig+0x332>
 8004f22:	bf00      	nop
 8004f24:	cfff69f3 	.word	0xcfff69f3
 8004f28:	40008000 	.word	0x40008000
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40004400 	.word	0x40004400
 8004f38:	40004800 	.word	0x40004800
 8004f3c:	40004c00 	.word	0x40004c00
 8004f40:	40005000 	.word	0x40005000
 8004f44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4c:	617b      	str	r3, [r7, #20]
        break;
 8004f4e:	e004      	b.n	8004f5a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	76bb      	strb	r3, [r7, #26]
        break;
 8004f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 811d 	beq.w	800519c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	4a97      	ldr	r2, [pc, #604]	; (80051c4 <UART_SetConfig+0x59c>)
 8004f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f74:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d305      	bcc.n	8004f92 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d902      	bls.n	8004f98 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	76bb      	strb	r3, [r7, #26]
 8004f96:	e101      	b.n	800519c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	4a87      	ldr	r2, [pc, #540]	; (80051c4 <UART_SetConfig+0x59c>)
 8004fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	f7fb f922 	bl	80001fc <__aeabi_uldivmod>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	0214      	lsls	r4, r2, #8
 8004fca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fce:	020b      	lsls	r3, r1, #8
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6852      	ldr	r2, [r2, #4]
 8004fd4:	0852      	lsrs	r2, r2, #1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	eb13 0b01 	adds.w	fp, r3, r1
 8004fe0:	eb44 0c02 	adc.w	ip, r4, r2
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	4661      	mov	r1, ip
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f04f 0400 	mov.w	r4, #0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	f7fb f902 	bl	80001fc <__aeabi_uldivmod>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005004:	d308      	bcc.n	8005018 <UART_SetConfig+0x3f0>
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500c:	d204      	bcs.n	8005018 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	e0c1      	b.n	800519c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	76bb      	strb	r3, [r7, #26]
 800501c:	e0be      	b.n	800519c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d164      	bne.n	80050f2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005028:	7efb      	ldrb	r3, [r7, #27]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d827      	bhi.n	800507e <UART_SetConfig+0x456>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x40c>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	0800507f 	.word	0x0800507f
 8005044:	0800506f 	.word	0x0800506f
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800507f 	.word	0x0800507f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fd ff50 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 800505c:	6178      	str	r0, [r7, #20]
        break;
 800505e:	e013      	b.n	8005088 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fd ff62 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8005064:	6178      	str	r0, [r7, #20]
        break;
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <UART_SetConfig+0x5a0>)
 800506a:	617b      	str	r3, [r7, #20]
        break;
 800506c:	e00c      	b.n	8005088 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fd feaf 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8005072:	6178      	str	r0, [r7, #20]
        break;
 8005074:	e008      	b.n	8005088 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	617b      	str	r3, [r7, #20]
        break;
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	76bb      	strb	r3, [r7, #26]
        break;
 8005086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8086 	beq.w	800519c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <UART_SetConfig+0x59c>)
 8005096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509a:	461a      	mov	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a2:	005a      	lsls	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	441a      	add	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d916      	bls.n	80050ec <UART_SetConfig+0x4c4>
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d212      	bcs.n	80050ec <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f023 030f 	bic.w	r3, r3, #15
 80050ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	b29a      	uxth	r2, r3
 80050dc:	89fb      	ldrh	r3, [r7, #14]
 80050de:	4313      	orrs	r3, r2
 80050e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	89fa      	ldrh	r2, [r7, #14]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	e057      	b.n	800519c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	76bb      	strb	r3, [r7, #26]
 80050f0:	e054      	b.n	800519c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f2:	7efb      	ldrb	r3, [r7, #27]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d828      	bhi.n	800514a <UART_SetConfig+0x522>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <UART_SetConfig+0x4d8>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005125 	.word	0x08005125
 8005104:	0800512d 	.word	0x0800512d
 8005108:	08005135 	.word	0x08005135
 800510c:	0800514b 	.word	0x0800514b
 8005110:	0800513b 	.word	0x0800513b
 8005114:	0800514b 	.word	0x0800514b
 8005118:	0800514b 	.word	0x0800514b
 800511c:	0800514b 	.word	0x0800514b
 8005120:	08005143 	.word	0x08005143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005124:	f7fd feea 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8005128:	6178      	str	r0, [r7, #20]
        break;
 800512a:	e013      	b.n	8005154 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800512c:	f7fd fefc 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8005130:	6178      	str	r0, [r7, #20]
        break;
 8005132:	e00f      	b.n	8005154 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <UART_SetConfig+0x5a0>)
 8005136:	617b      	str	r3, [r7, #20]
        break;
 8005138:	e00c      	b.n	8005154 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513a:	f7fd fe49 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 800513e:	6178      	str	r0, [r7, #20]
        break;
 8005140:	e008      	b.n	8005154 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	617b      	str	r3, [r7, #20]
        break;
 8005148:	e004      	b.n	8005154 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	76bb      	strb	r3, [r7, #26]
        break;
 8005152:	bf00      	nop
    }

    if (pclk != 0U)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <UART_SetConfig+0x59c>)
 8005160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005164:	461a      	mov	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	fbb3 f2f2 	udiv	r2, r3, r2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d908      	bls.n	8005198 <UART_SetConfig+0x570>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d204      	bcs.n	8005198 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80051b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80051c4:	080057a4 	.word	0x080057a4
 80051c8:	00f42400 	.word	0x00f42400

080051cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ca:	d10a      	bne.n	80052e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005320:	f7fc f828 	bl	8001374 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10e      	bne.n	8005352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f82c 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e022      	b.n	8005398 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d10e      	bne.n	800537e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f816 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e00c      	b.n	8005398 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b0:	e062      	b.n	8005478 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d05e      	beq.n	8005478 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fb ffdb 	bl	8001374 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11d      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053de:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e045      	b.n	8005498 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02e      	beq.n	8005478 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005428:	d126      	bne.n	8005478 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005432:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005442:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e00f      	b.n	8005498 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	429a      	cmp	r2, r3
 8005494:	d08d      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e027      	b.n	8005506 <HAL_UARTEx_DisableFifoMode+0x66>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2224      	movs	r2, #36	; 0x24
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005526:	2302      	movs	r3, #2
 8005528:	e02d      	b.n	8005586 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	; 0x24
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f850 	bl	800560c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e02d      	b.n	8005602 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2224      	movs	r2, #36	; 0x24
 80055b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f812 	bl	800560c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	; 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005614:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005616:	f107 0314 	add.w	r3, r7, #20
 800561a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800561e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005622:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005624:	f107 030c 	add.w	r3, r7, #12
 8005628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800562c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005648:	e03d      	b.n	80056c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800564a:	2308      	movs	r3, #8
 800564c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800564e:	2308      	movs	r3, #8
 8005650:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	0e5b      	lsrs	r3, r3, #25
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	0f5b      	lsrs	r3, r3, #29
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005672:	7fbb      	ldrb	r3, [r7, #30]
 8005674:	7f3a      	ldrb	r2, [r7, #28]
 8005676:	f107 0120 	add.w	r1, r7, #32
 800567a:	440a      	add	r2, r1
 800567c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005680:	fb02 f303 	mul.w	r3, r2, r3
 8005684:	7f3a      	ldrb	r2, [r7, #28]
 8005686:	f107 0120 	add.w	r1, r7, #32
 800568a:	440a      	add	r2, r1
 800568c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005690:	fb93 f3f2 	sdiv	r3, r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800569c:	7ffb      	ldrb	r3, [r7, #31]
 800569e:	7f7a      	ldrb	r2, [r7, #29]
 80056a0:	f107 0120 	add.w	r1, r7, #32
 80056a4:	440a      	add	r2, r1
 80056a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	7f7a      	ldrb	r2, [r7, #29]
 80056b0:	f107 0120 	add.w	r1, r7, #32
 80056b4:	440a      	add	r2, r1
 80056b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056c6:	bf00      	nop
 80056c8:	3724      	adds	r7, #36	; 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	0800574c 	.word	0x0800574c
 80056d8:	08005754 	.word	0x08005754

080056dc <__libc_init_array>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0d      	ldr	r6, [pc, #52]	; (8005714 <__libc_init_array+0x38>)
 80056e0:	4c0d      	ldr	r4, [pc, #52]	; (8005718 <__libc_init_array+0x3c>)
 80056e2:	1ba4      	subs	r4, r4, r6
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	2500      	movs	r5, #0
 80056e8:	42a5      	cmp	r5, r4
 80056ea:	d109      	bne.n	8005700 <__libc_init_array+0x24>
 80056ec:	4e0b      	ldr	r6, [pc, #44]	; (800571c <__libc_init_array+0x40>)
 80056ee:	4c0c      	ldr	r4, [pc, #48]	; (8005720 <__libc_init_array+0x44>)
 80056f0:	f000 f820 	bl	8005734 <_init>
 80056f4:	1ba4      	subs	r4, r4, r6
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	2500      	movs	r5, #0
 80056fa:	42a5      	cmp	r5, r4
 80056fc:	d105      	bne.n	800570a <__libc_init_array+0x2e>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005704:	4798      	blx	r3
 8005706:	3501      	adds	r5, #1
 8005708:	e7ee      	b.n	80056e8 <__libc_init_array+0xc>
 800570a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800570e:	4798      	blx	r3
 8005710:	3501      	adds	r5, #1
 8005712:	e7f2      	b.n	80056fa <__libc_init_array+0x1e>
 8005714:	080057c4 	.word	0x080057c4
 8005718:	080057c4 	.word	0x080057c4
 800571c:	080057c4 	.word	0x080057c4
 8005720:	080057c8 	.word	0x080057c8

08005724 <memset>:
 8005724:	4402      	add	r2, r0
 8005726:	4603      	mov	r3, r0
 8005728:	4293      	cmp	r3, r2
 800572a:	d100      	bne.n	800572e <memset+0xa>
 800572c:	4770      	bx	lr
 800572e:	f803 1b01 	strb.w	r1, [r3], #1
 8005732:	e7f9      	b.n	8005728 <memset+0x4>

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
